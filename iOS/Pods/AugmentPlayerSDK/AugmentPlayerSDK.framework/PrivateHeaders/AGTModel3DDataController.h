//
//  AGTModel3DDataController.h
//  Augment
//
//  Created by Mert Buran on 6/24/16.
//  Copyright Â© 2016 AugmenteDev. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <AugmentPlayerSDK/AGTBlocks.h>
#import <AugmentPlayerSDK/AGTNetworkManager.h>
#import <AugmentPlayerSDK/AGTModel3D.h>

/**
 *  Predefined keys for accessing information at model3D JSON
 */
extern NSString * const AugmentModel3DModelURLKey;
extern NSString * const AugmentModel3DModelUpdatedAtKey;

/**
 *  Scope: Private
 *  all the data operations involves model3D asset(s) are the responsibility of this class
 */
@interface AGTModel3DDataController : NSObject

/**
 *  creates a new data controller instance
 *
 *  @param networkManager           AGTNetworkManager(AFHTTPSessionManager) object that is used for making network requests by this class. to avoid singleton network manager instance within SDK
 *
 *  @return newly created data controller instance
 */
- (instancetype)initWithNetworkManager:(AGTNetworkManager *)networkManager;

#pragma mark - Offline operations

/**
 *  Access informations about locally available assets and metadata
 *
 *  @param modelUUID identifier of the model whose asset/metadata is being requested
 *
 *  @return locally available asset/metadata, nil if doesn't exist
 */
- (NSString *)locallyAvailableAssetPathForModelUUID:(NSString *)modelUUID;
- (AGTModel3D *)locallyAvailableMetadataForModelUUID:(NSString *)modelUUID;
- (NSDate *)lastUpdateDateOfLocallyAvailableAssetForModelUUID:(NSString *)modelUUID;
- (void)updateLocallyAvailableMetadataOfModel3D:(AGTModel3D *)model3D;

/**
 *  deletes the folder which has asset and metadata files
 *
 *  @param modelUUID identifier of the model whose asset/metadata should be deleted
 *
 *  @return an NSError if an error occurred during deletion, nil if no error occurred
 */
- (NSError *)deleteLocallyAvailableAssetAndMetadataForModelUUID:(NSString *)modelUUID;

#pragma mark - Online operations

/**
 *  this method downloads an asset and writes it onto disk if needed.
 *  basically this method does what getModel3DAssetsForModelUUID method does after fetching model 3D JSON
 *  NOTE: AGTModel3DDataController merges download tasks
 *  To identify those tasks, request makers should declare their callerIDs
 *  With those callerIDs, request makers can add or discard progress and completion blocks to ongoing tasks
 *  If you cancel the returned NSURLSessionDownloadTask instance, you may cause trouble for other request makers
 *
 *  @param model3D              model3D to be downloaded if needed
 *  @param callerID             unique identifier for the caller to identify its progress and completion block
 *                              it is generated by AGTModel3DDataController and assigned to your pointer
 *  @param progress             progress block. runs on background thread
 *  @param completion           executed after download and disk operations finish. runs on background thread
 *                              downloadStarted: YES if download operation was needed and started, NO if no download takes place
 *                              error: NON-nil if download operation causes an error
 *
 *  @return                     returns NSURLSessionDownloadTask if initiated, otherwise nil
 */
- (NSURLSessionDownloadTask *)downloadIfNeededModel3DAssetForModel3D:(AGTModel3D *)model3D
                                                            callerID:(NSUUID **)callerID
                                                            progress:(AGTOperationProgressBlock)progress
                                                          completion:(AGTDownloadIfNeededCompletionBlock)completion;

/**
 Discard progress and completion blocks for a certain callerID for a certain model 3D request

 @param model3D  requested model 3D
 @param callerID identifier whose progress/completion blocks to be discarded
 */
- (void)cancelDownloadTaskForModel3D:(AGTModel3D *)model3D forCallerID:(NSUUID *)callerID;

#pragma mark - Data migration

- (NSError *)migrateMetadata:(AGTModel3D *)metadata assetPath:(NSString *)assetPath;

@end
